const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');
const ShaiHuludScanner = require('../lib/scanner');

// Mock fs module
jest.mock('fs');

describe('Integration Tests', () => {
  let scanner;
  const mockAttackedList = [
    '@ahmedhfarag/ngx-perfect-scrollbar@20.0.20',
    '@art-ws/common@2.0.28',
    'lodash@4.17.21'
  ];

  beforeEach(() => {
    jest.clearAllMocks();
    
    fs.readFileSync.mockImplementation((filePath, encoding) => {
      if (filePath.includes('shai-hulud-attacked-list.txt')) {
        return mockAttackedList.join('\n');
      }
      throw new Error('File not found');
    });

    scanner = new ShaiHuludScanner();
  });

  describe('End-to-End Scanner Tests', () => {
    test('should perform complete scan workflow', () => {
      // Mock directory structure
      const mockEntries = [
        { name: 'package-lock.json', isDirectory: () => false, isFile: () => true },
        { name: 'yarn.lock', isDirectory: () => false, isFile: () => true },
        { name: 'pnpm-lock.yaml', isDirectory: () => false, isFile: () => true },
        { name: 'src', isDirectory: () => true, isFile: () => false }
      ];
      
      const mockSubEntries = [
        { name: 'package-lock.json', isDirectory: () => false, isFile: () => true }
      ];
      
      fs.readdirSync
        .mockReturnValueOnce(mockEntries)
        .mockReturnValueOnce(mockSubEntries);
      
      // Mock lockfile contents
      fs.readFileSync.mockImplementation((filePath) => {
        if (filePath.includes('shai-hulud-attacked-list.txt')) {
          return mockAttackedList.join('\n');
        }
        if (filePath.includes('package-lock.json')) {
          return JSON.stringify({
            lockfileVersion: 1,
            dependencies: {
              '@ahmedhfarag/ngx-perfect-scrollbar': { version: '20.0.20' },
              'lodash': { version: '4.17.21' }
            }
          });
        }
        if (filePath.includes('yarn.lock')) {
          return `# yarn.lock
"@art-ws/common@2.0.28":
  version "2.0.28"
  resolved "https://registry.npmjs.org/@art-ws/common/-/common-2.0.28.tgz#sha512-test"
  integrity sha512-test`;
        }
        if (filePath.includes('pnpm-lock.yaml')) {
          return `lockfileVersion: '6.0'

packages:
  /lodash@4.17.21:
    version: 4.17.21
    resolution: 'lodash@4.17.21'
    integrity: sha512-test`;
        }
        throw new Error('File not found');
      });
      
      const result = scanner.scan('/test/project');
      
      expect(result.total).toBe(6); // 2 from package-lock.json, 2 from yarn.lock, 2 from pnpm-lock.yaml
      expect(result.results['@ahmedhfarag/ngx-perfect-scrollbar@20.0.20']).toBeDefined();
      expect(result.results['@art-ws/common@2.0.28']).toBeDefined();
      expect(result.results['lodash@4.17.21']).toBeDefined();
    });

    test('should handle real-world package-lock.json v2 format', () => {
      const mockContent = JSON.stringify({
        "name": "real-world-project",
        "version": "1.0.0",
        "lockfileVersion": 2,
        "packages": {
          "": {
            "name": "real-world-project",
            "version": "1.0.0",
            "dependencies": {
              "@ahmedhfarag/ngx-perfect-scrollbar": "^20.0.20"
            }
          },
          "node_modules/@ahmedhfarag/ngx-perfect-scrollbar": {
            "version": "20.0.20",
            "resolved": "https://registry.npmjs.org/@ahmedhfarag/ngx-perfect-scrollbar/-/ngx-perfect-scrollbar-20.0.20.tgz",
            "integrity": "sha512-test",
            "dependencies": {
              "lodash": "^4.17.21"
            }
          },
          "node_modules/lodash": {
            "version": "4.17.21",
            "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
            "integrity": "sha512-test"
          }
        }
      });
      
      fs.readFileSync.mockReturnValue(mockContent);
      
      const result = scanner.checkPackageLock('/path/to/package-lock.json');
      
      expect(result).toEqual({
        '@ahmedhfarag/ngx-perfect-scrollbar@20.0.20': true,
        'lodash@4.17.21': true
      });
    });

    test('should handle real-world yarn.lock format', () => {
      const mockContent = `# yarn.lock
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

"@ahmedhfarag/ngx-perfect-scrollbar@^20.0.20":
  version "20.0.20"
  resolved "https://registry.npmjs.org/@ahmedhfarag/ngx-perfect-scrollbar/-/ngx-perfect-scrollbar-20.0.20.tgz#sha512-test"
  integrity sha512-test
  dependencies:
    lodash "^4.17.21"

"@art-ws/common@^2.0.28":
  version "2.0.28"
  resolved "https://registry.npmjs.org/@art-ws/common/-/common-2.0.28.tgz#sha512-test"
  integrity sha512-test

lodash@^4.17.21:
  version "4.17.21"
  resolved "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz#sha512-test"
  integrity sha512-test`;
      
      fs.readFileSync.mockReturnValue(mockContent);
      
      const result = scanner.checkYarnLock('/path/to/yarn.lock');
      
      expect(result).toEqual({
        '@ahmedhfarag/ngx-perfect-scrollbar@20.0.20': true,
        '@art-ws/common@2.0.28': true,
        'lodash@4.17.21': true
      });
    });

    test('should handle real-world pnpm-lock.yaml format', () => {
      const mockContent = `lockfileVersion: '6.0'

packages:
  /@ahmedhfarag/ngx-perfect-scrollbar@20.0.20:
    version: 20.0.20
    resolution: '@ahmedhfarag/ngx-perfect-scrollbar@20.0.20'
    integrity: sha512-test
    dependencies:
      lodash: ^4.17.21

  /@art-ws/common@2.0.28:
    version: 2.0.28
    resolution: '@art-ws/common@2.0.28'
    integrity: sha512-test

  /lodash@4.17.21:
    version: 4.17.21
    resolution: 'lodash@4.17.21'
    integrity: sha512-test`;
      
      fs.readFileSync.mockReturnValue(mockContent);
      
      const result = scanner.checkPnpmLock('/path/to/pnpm-lock.yaml');
      
      expect(result).toEqual({
        '@ahmedhfarag/ngx-perfect-scrollbar@20.0.20': true,
        '@art-ws/common@2.0.28': true,
        'lodash@4.17.21': true
      });
    });
  });

  describe('Output Formatting Integration', () => {
    test('should format complete scan results correctly', () => {
      const scanResults = {
        results: {
          '@ahmedhfarag/ngx-perfect-scrollbar@20.0.20': [
            '/project/package-lock.json',
            '/project/src/package-lock.json'
          ],
          'lodash@4.17.21': ['/project/yarn.lock']
        },
        total: 3,
        lockFiles: ['/project/package-lock.json', '/project/yarn.lock', '/project/src/package-lock.json']
      };
      
      const textOutput = scanner.formatOutput(scanResults, { json: false });
      
      expect(textOutput).toContain('Found 3 packages affected');
      expect(textOutput).toContain('@ahmedhfarag/ngx-perfect-scrollbar@20.0.20');
      expect(textOutput).toContain('lodash@4.17.21');
      expect(textOutput).toContain('/project/package-lock.json');
      expect(textOutput).toContain('/project/yarn.lock');
    });

    test('should format JSON output correctly', () => {
      const scanResults = {
        results: {
          '@ahmedhfarag/ngx-perfect-scrollbar@20.0.20': ['/project/package-lock.json'],
          'lodash@4.17.21': ['/project/yarn.lock']
        },
        total: 2,
        lockFiles: ['/project/package-lock.json', '/project/yarn.lock']
      };
      
      const jsonOutput = scanner.formatOutput(scanResults, { json: true });
      const parsed = JSON.parse(jsonOutput);
      
      expect(parsed).toHaveLength(2);
      expect(parsed[0]).toEqual({
        package: '@ahmedhfarag/ngx-perfect-scrollbar@20.0.20',
        lockFile: '/project/package-lock.json',
        severity: 'high',
        type: 'shai-hulud-compromise'
      });
      expect(parsed[1]).toEqual({
        package: 'lodash@4.17.21',
        lockFile: '/project/yarn.lock',
        severity: 'high',
        type: 'shai-hulud-compromise'
      });
    });
  });

  describe('Performance Integration Tests', () => {
    test('should handle large projects efficiently', () => {
      const startTime = Date.now();
      
      // Mock large directory structure
      const mockEntries = Array.from({ length: 100 }, (_, i) => ({
        name: `package-lock-${i}.json`,
        isDirectory: () => false,
        isFile: () => true
      }));
      
      fs.readdirSync.mockReturnValue(mockEntries);
      
      // Mock large lockfile content
      const largeDeps = {};
      for (let i = 0; i < 1000; i++) {
        largeDeps[`package${i}`] = { version: `${i}.0.0` };
      }
      
      fs.readFileSync.mockImplementation((filePath) => {
        if (filePath.includes('shai-hulud-attacked-list.txt')) {
          return mockAttackedList.join('\n');
        }
        return JSON.stringify({
          lockfileVersion: 1,
          dependencies: largeDeps
        });
      });
      
      const result = scanner.scan('/large/project');
      
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      expect(result.total).toBe(0); // No matches in large project
      expect(duration).toBeLessThan(5000); // Should complete within 5 seconds
    });

    test('should handle deeply nested projects', () => {
      const mockEntries = [
        { name: 'level1', isDirectory: () => true, isFile: () => false }
      ];
      
      const level1Entries = [
        { name: 'level2', isDirectory: () => true, isFile: () => false }
      ];
      
      const level2Entries = [
        { name: 'level3', isDirectory: () => true, isFile: () => false }
      ];
      
      const level3Entries = [
        { name: 'level4', isDirectory: () => true, isFile: () => false }
      ];
      
      const level4Entries = [
        { name: 'package-lock.json', isDirectory: () => false, isFile: () => true }
      ];
      
      fs.readdirSync
        .mockReturnValueOnce(mockEntries)
        .mockReturnValueOnce(level1Entries)
        .mockReturnValueOnce(level2Entries)
        .mockReturnValueOnce(level3Entries)
        .mockReturnValueOnce(level4Entries);
      
      fs.readFileSync.mockImplementation((filePath) => {
        if (filePath.includes('shai-hulud-attacked-list.txt')) {
          return mockAttackedList.join('\n');
        }
        return JSON.stringify({
          lockfileVersion: 1,
          dependencies: { 'lodash': { version: '4.17.21' } }
        });
      });
      
      const result = scanner.scan('/deep/project');
      
      expect(result.total).toBe(1);
      expect(result.results['lodash@4.17.21']).toBeDefined();
    });
  });

  describe('Error Recovery Integration', () => {
    test('should continue scanning after encountering errors', () => {
      const mockEntries = [
        { name: 'package-lock.json', isDirectory: () => false, isFile: () => true },
        { name: 'yarn.lock', isDirectory: () => false, isFile: () => true },
        { name: 'pnpm-lock.yaml', isDirectory: () => false, isFile: () => true }
      ];
      
      fs.readdirSync.mockReturnValue(mockEntries);
      
      let callCount = 0;
      fs.readFileSync.mockImplementation((filePath) => {
        if (filePath.includes('shai-hulud-attacked-list.txt')) {
          return mockAttackedList.join('\n');
        }
        
        callCount++;
        if (callCount === 1) {
          // First file fails
          throw new Error('File read error');
        }
        if (filePath.includes('yarn.lock')) {
          return `# yarn.lock
"@art-ws/common@2.0.28":
  version "2.0.28"
  resolved "https://registry.npmjs.org/@art-ws/common/-/common-2.0.28.tgz#sha512-test"
  integrity sha512-test`;
        }
        if (filePath.includes('pnpm-lock.yaml')) {
          return `lockfileVersion: '6.0'

packages:
  /lodash@4.17.21:
    version: 4.17.21
    resolution: 'lodash@4.17.21'
    integrity: sha512-test`;
        }
        throw new Error('File not found');
      });
      
      const result = scanner.scan('/error/project');
      
      expect(result.total).toBe(2);
      expect(result.results['@art-ws/common@2.0.28']).toBeDefined();
      expect(result.results['lodash@4.17.21']).toBeDefined();
    });

    test('should handle partial lockfile corruption', () => {
      const mockContent = JSON.stringify({
        lockfileVersion: 1,
        dependencies: {
          '@ahmedhfarag/ngx-perfect-scrollbar': { version: '20.0.20' },
          'corrupted': { version: '1.0.0' }
        }
      });
      
      fs.readFileSync.mockImplementation((filePath) => {
        if (filePath.includes('shai-hulud-attacked-list.txt')) {
          return mockAttackedList.join('\n');
        }
        if (filePath.includes('package-lock.json')) {
          return mockContent;
        }
        throw new Error('File not found');
      });
      
      const result = scanner.checkPackageLock('/path/to/package-lock.json');
      
      expect(result).toEqual({
        '@ahmedhfarag/ngx-perfect-scrollbar@20.0.20': true
      });
    });
  });
});
